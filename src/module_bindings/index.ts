// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  CallReducerFlags,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  DbContext,
  ErrorContextInterface,
  Event,
  EventContextInterface,
  Identity,
  ProductType,
  ProductTypeElement,
  ReducerEventContextInterface,
  SubscriptionBuilderImpl,
  SubscriptionEventContextInterface,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
} from "@clockworklabs/spacetimedb-sdk";

// Import and reexport all reducer arg types
import { ClearAllIdentities } from "./clear_all_identities_reducer.ts";
export { ClearAllIdentities };
import { ClearIdentity } from "./clear_identity_reducer.ts";
export { ClearIdentity };
import { IdentityConnected } from "./identity_connected_reducer.ts";
export { IdentityConnected };
import { IdentityDisconnected } from "./identity_disconnected_reducer.ts";
export { IdentityDisconnected };
import { Join } from "./join_reducer.ts";
export { Join };
import { Ping } from "./ping_reducer.ts";
export { Ping };
import { RemoveAllBalls } from "./remove_all_balls_reducer.ts";
export { RemoveAllBalls };
import { SpawnBall } from "./spawn_ball_reducer.ts";
export { SpawnBall };
import { SpawnBallsRandomly } from "./spawn_balls_randomly_reducer.ts";
export { SpawnBallsRandomly };
import { Update } from "./update_reducer.ts";
export { Update };

// Import and reexport all table handle types
import { AdminsTableHandle } from "./admins_table.ts";
export { AdminsTableHandle };
import { IdentifiablesTableHandle } from "./identifiables_table.ts";
export { IdentifiablesTableHandle };
import { MovablesTableHandle } from "./movables_table.ts";
export { MovablesTableHandle };
import { PingablesTableHandle } from "./pingables_table.ts";
export { PingablesTableHandle };
import { SchedulesTableHandle } from "./schedules_table.ts";
export { SchedulesTableHandle };

// Import and reexport all types
import { Admins } from "./admins_type.ts";
export { Admins };
import { EntityKind } from "./entity_kind_type.ts";
export { EntityKind };
import { EntityState } from "./entity_state_type.ts";
export { EntityState };
import { Identifiable } from "./identifiable_type.ts";
export { Identifiable };
import { Movable } from "./movable_type.ts";
export { Movable };
import { Pingable } from "./pingable_type.ts";
export { Pingable };
import { Schedule } from "./schedule_type.ts";
export { Schedule };
import { Vector3 } from "./vector_3_type.ts";
export { Vector3 };

const REMOTE_MODULE = {
  tables: {
    admins: {
      tableName: "admins",
      rowType: Admins.getTypeScriptAlgebraicType(),
      primaryKey: "identity",
    },
    identifiables: {
      tableName: "identifiables",
      rowType: Identifiable.getTypeScriptAlgebraicType(),
      primaryKey: "name",
    },
    movables: {
      tableName: "movables",
      rowType: Movable.getTypeScriptAlgebraicType(),
      primaryKey: "name",
    },
    pingables: {
      tableName: "pingables",
      rowType: Pingable.getTypeScriptAlgebraicType(),
      primaryKey: "name",
    },
    schedules: {
      tableName: "schedules",
      rowType: Schedule.getTypeScriptAlgebraicType(),
      primaryKey: "scheduledId",
    },
  },
  reducers: {
    clear_all_identities: {
      reducerName: "clear_all_identities",
      argsType: ClearAllIdentities.getTypeScriptAlgebraicType(),
    },
    clear_identity: {
      reducerName: "clear_identity",
      argsType: ClearIdentity.getTypeScriptAlgebraicType(),
    },
    identity_connected: {
      reducerName: "identity_connected",
      argsType: IdentityConnected.getTypeScriptAlgebraicType(),
    },
    identity_disconnected: {
      reducerName: "identity_disconnected",
      argsType: IdentityDisconnected.getTypeScriptAlgebraicType(),
    },
    join: {
      reducerName: "join",
      argsType: Join.getTypeScriptAlgebraicType(),
    },
    ping: {
      reducerName: "ping",
      argsType: Ping.getTypeScriptAlgebraicType(),
    },
    remove_all_balls: {
      reducerName: "remove_all_balls",
      argsType: RemoveAllBalls.getTypeScriptAlgebraicType(),
    },
    spawn_ball: {
      reducerName: "spawn_ball",
      argsType: SpawnBall.getTypeScriptAlgebraicType(),
    },
    spawn_balls_randomly: {
      reducerName: "spawn_balls_randomly",
      argsType: SpawnBallsRandomly.getTypeScriptAlgebraicType(),
    },
    update: {
      reducerName: "update",
      argsType: Update.getTypeScriptAlgebraicType(),
    },
  },
  // Constructors which are used by the DbConnectionImpl to
  // extract type information from the generated RemoteModule.
  //
  // NOTE: This is not strictly necessary for `eventContextConstructor` because
  // all we do is build a TypeScript object which we could have done inside the
  // SDK, but if in the future we wanted to create a class this would be
  // necessary because classes have methods, so we'll keep it.
  eventContextConstructor: (imp: DbConnectionImpl, event: Event<Reducer>) => {
    return {
      ...(imp as DbConnection),
      event
    }
  },
  dbViewConstructor: (imp: DbConnectionImpl) => {
    return new RemoteTables(imp);
  },
  reducersConstructor: (imp: DbConnectionImpl, setReducerFlags: SetReducerFlags) => {
    return new RemoteReducers(imp, setReducerFlags);
  },
  setReducerFlagsConstructor: () => {
    return new SetReducerFlags();
  }
}

// A type representing all the possible variants of a reducer.
export type Reducer = never
| { name: "ClearAllIdentities", args: ClearAllIdentities }
| { name: "ClearIdentity", args: ClearIdentity }
| { name: "IdentityConnected", args: IdentityConnected }
| { name: "IdentityDisconnected", args: IdentityDisconnected }
| { name: "Join", args: Join }
| { name: "Ping", args: Ping }
| { name: "RemoveAllBalls", args: RemoveAllBalls }
| { name: "SpawnBall", args: SpawnBall }
| { name: "SpawnBallsRandomly", args: SpawnBallsRandomly }
| { name: "Update", args: Update }
;

export class RemoteReducers {
  constructor(private connection: DbConnectionImpl, private setCallReducerFlags: SetReducerFlags) {}

  clearAllIdentities() {
    this.connection.callReducer("clear_all_identities", new Uint8Array(0), this.setCallReducerFlags.clearAllIdentitiesFlags);
  }

  onClearAllIdentities(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("clear_all_identities", callback);
  }

  removeOnClearAllIdentities(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("clear_all_identities", callback);
  }

  clearIdentity(name: string) {
    const __args = { name };
    let __writer = new BinaryWriter(1024);
    ClearIdentity.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("clear_identity", __argsBuffer, this.setCallReducerFlags.clearIdentityFlags);
  }

  onClearIdentity(callback: (ctx: ReducerEventContext, name: string) => void) {
    this.connection.onReducer("clear_identity", callback);
  }

  removeOnClearIdentity(callback: (ctx: ReducerEventContext, name: string) => void) {
    this.connection.offReducer("clear_identity", callback);
  }

  onIdentityConnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("identity_connected", callback);
  }

  removeOnIdentityConnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("identity_connected", callback);
  }

  onIdentityDisconnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("identity_disconnected", callback);
  }

  removeOnIdentityDisconnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("identity_disconnected", callback);
  }

  join(name: string) {
    const __args = { name };
    let __writer = new BinaryWriter(1024);
    Join.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("join", __argsBuffer, this.setCallReducerFlags.joinFlags);
  }

  onJoin(callback: (ctx: ReducerEventContext, name: string) => void) {
    this.connection.onReducer("join", callback);
  }

  removeOnJoin(callback: (ctx: ReducerEventContext, name: string) => void) {
    this.connection.offReducer("join", callback);
  }

  ping(timestamp: bigint) {
    const __args = { timestamp };
    let __writer = new BinaryWriter(1024);
    Ping.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("ping", __argsBuffer, this.setCallReducerFlags.pingFlags);
  }

  onPing(callback: (ctx: ReducerEventContext, timestamp: bigint) => void) {
    this.connection.onReducer("ping", callback);
  }

  removeOnPing(callback: (ctx: ReducerEventContext, timestamp: bigint) => void) {
    this.connection.offReducer("ping", callback);
  }

  removeAllBalls() {
    this.connection.callReducer("remove_all_balls", new Uint8Array(0), this.setCallReducerFlags.removeAllBallsFlags);
  }

  onRemoveAllBalls(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("remove_all_balls", callback);
  }

  removeOnRemoveAllBalls(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("remove_all_balls", callback);
  }

  spawnBall(position: Vector3) {
    const __args = { position };
    let __writer = new BinaryWriter(1024);
    SpawnBall.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("spawn_ball", __argsBuffer, this.setCallReducerFlags.spawnBallFlags);
  }

  onSpawnBall(callback: (ctx: ReducerEventContext, position: Vector3) => void) {
    this.connection.onReducer("spawn_ball", callback);
  }

  removeOnSpawnBall(callback: (ctx: ReducerEventContext, position: Vector3) => void) {
    this.connection.offReducer("spawn_ball", callback);
  }

  spawnBallsRandomly(count: number) {
    const __args = { count };
    let __writer = new BinaryWriter(1024);
    SpawnBallsRandomly.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("spawn_balls_randomly", __argsBuffer, this.setCallReducerFlags.spawnBallsRandomlyFlags);
  }

  onSpawnBallsRandomly(callback: (ctx: ReducerEventContext, count: number) => void) {
    this.connection.onReducer("spawn_balls_randomly", callback);
  }

  removeOnSpawnBallsRandomly(callback: (ctx: ReducerEventContext, count: number) => void) {
    this.connection.offReducer("spawn_balls_randomly", callback);
  }

  update(arg: Schedule) {
    const __args = { arg };
    let __writer = new BinaryWriter(1024);
    Update.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("update", __argsBuffer, this.setCallReducerFlags.updateFlags);
  }

  onUpdate(callback: (ctx: ReducerEventContext, arg: Schedule) => void) {
    this.connection.onReducer("update", callback);
  }

  removeOnUpdate(callback: (ctx: ReducerEventContext, arg: Schedule) => void) {
    this.connection.offReducer("update", callback);
  }

}

export class SetReducerFlags {
  clearAllIdentitiesFlags: CallReducerFlags = 'FullUpdate';
  clearAllIdentities(flags: CallReducerFlags) {
    this.clearAllIdentitiesFlags = flags;
  }

  clearIdentityFlags: CallReducerFlags = 'FullUpdate';
  clearIdentity(flags: CallReducerFlags) {
    this.clearIdentityFlags = flags;
  }

  joinFlags: CallReducerFlags = 'FullUpdate';
  join(flags: CallReducerFlags) {
    this.joinFlags = flags;
  }

  pingFlags: CallReducerFlags = 'FullUpdate';
  ping(flags: CallReducerFlags) {
    this.pingFlags = flags;
  }

  removeAllBallsFlags: CallReducerFlags = 'FullUpdate';
  removeAllBalls(flags: CallReducerFlags) {
    this.removeAllBallsFlags = flags;
  }

  spawnBallFlags: CallReducerFlags = 'FullUpdate';
  spawnBall(flags: CallReducerFlags) {
    this.spawnBallFlags = flags;
  }

  spawnBallsRandomlyFlags: CallReducerFlags = 'FullUpdate';
  spawnBallsRandomly(flags: CallReducerFlags) {
    this.spawnBallsRandomlyFlags = flags;
  }

  updateFlags: CallReducerFlags = 'FullUpdate';
  update(flags: CallReducerFlags) {
    this.updateFlags = flags;
  }

}

export class RemoteTables {
  constructor(private connection: DbConnectionImpl) {}

  get admins(): AdminsTableHandle {
    return new AdminsTableHandle(this.connection.clientCache.getOrCreateTable<Admins>(REMOTE_MODULE.tables.admins));
  }

  get identifiables(): IdentifiablesTableHandle {
    return new IdentifiablesTableHandle(this.connection.clientCache.getOrCreateTable<Identifiable>(REMOTE_MODULE.tables.identifiables));
  }

  get movables(): MovablesTableHandle {
    return new MovablesTableHandle(this.connection.clientCache.getOrCreateTable<Movable>(REMOTE_MODULE.tables.movables));
  }

  get pingables(): PingablesTableHandle {
    return new PingablesTableHandle(this.connection.clientCache.getOrCreateTable<Pingable>(REMOTE_MODULE.tables.pingables));
  }

  get schedules(): SchedulesTableHandle {
    return new SchedulesTableHandle(this.connection.clientCache.getOrCreateTable<Schedule>(REMOTE_MODULE.tables.schedules));
  }
}

export class SubscriptionBuilder extends SubscriptionBuilderImpl<RemoteTables, RemoteReducers, SetReducerFlags> { }

export class DbConnection extends DbConnectionImpl<RemoteTables, RemoteReducers, SetReducerFlags> {
  static builder = (): DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext> => {
    return new DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext>(REMOTE_MODULE, (imp: DbConnectionImpl) => imp as DbConnection);
  }
  subscriptionBuilder = (): SubscriptionBuilder => {
    return new SubscriptionBuilder(this);
  }
}

export type EventContext = EventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type ReducerEventContext = ReducerEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type SubscriptionEventContext = SubscriptionEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
export type ErrorContext = ErrorContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
